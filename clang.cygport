# -*- mode: sh; sh-shell: bash -*-
CYGCMAKE_GENERATOR="Ninja"
inherit cmake python3

BUILD_REQUIRES=" cmake llvm libllvm-devel python39-devel"

NAME="clang"
VERSION="9.0.1"
RELEASE="1"
CATEGORY="Devel"
SUMMARY="C/C++ compiler frontend based on LLVM"
DESCRIPTION="Clang is an LLVM native C/C++/ObjC compiler, which aims to deliver
amazingly fast compiles, extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang Static
Analyzer is a tool that automatically finds bugs in your code, and is a great
example of the sort of tool that can be built using the Clang frontend as a
library to parse C/C++ code."
HOMEPAGE="http://clang.llvm.org/"
SRC_URI="
  https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}/${P}.src.tar.xz
"
SRC_DIR="${P}.src"
PATCH_URI="
  3.9.1-lib-soversion.patch
  7.0.1-linux-includes.patch
  7.0.1-mingw-sjlj.patch
  7.0.1-mingw-stdcxxlibs.patch
  7.0.1-mingw-sysroot.patch
  7.0.1-cygwin-basic.patch
  7.0.1-cygwin-driver.patch
  5.0.1-newlib-ftm.patch
  7.0.1-objc-seh.patch
  8.0.1-polly-cmake.patch
"
RESTRICT="debuginfo"

PKG_NAMES="clang libclang9 clang-analyzer git-clang-format libclang-devel"
clang_REQUIRES="binutils compiler-rt cygwin-devel gcc-core gcc-g++ libc++-devel libunwind-devel windows-default-manifest"
clang_CONTENTS="
  --exclude=html
  usr/bin/clang
  usr/bin/clang++
  usr/bin/clang-check.exe
  usr/bin/clang-cpp
  usr/bin/clang-extdef-mapping.exe
  usr/bin/clang-format.exe
  usr/bin/clang-import-test.exe
  usr/bin/clang-offload-bundler.exe
  usr/bin/clang-refactor.exe
  usr/bin/clang-rename.exe
  usr/bin/diagtool.exe
  usr/bin/hmaptool
  usr/bin/c-index-test.exe
  usr/share/bash-completion/completions/clang
  usr/share/doc/clang/
"
clang_analyzer_SUMMARY="C/C++/ObjC code analyzer"
clang_analyzer_REQUIRES="clang"
clang_analyzer_CONTENTS="
  usr/bin/scan-*
  usr/libexec/c*-analyzer
  usr/share/scan-*
  usr/share/man/man1/scan-build.*
"
git_clang_format_SUMMARY="C/C++ code formatting support for Git"
git_clang_format_REQUIRES="clang git"
git_clang_format_CONTENTS="usr/bin/git-clang-format"
libclang9_CATEGORY="Libs"
libclang9_SUMMARY="C/C++/ObjC compiler libraries (runtime)"
libclang9_CONTENTS="
  usr/bin/clang-9.exe
  usr/bin/clang++-9
  usr/bin/cygclang*-9.dll
  usr/lib/clang/${PV}/
"
libclang_devel_CATEGORY="Libs"
libclang_devel_SUMMARY="C/C++/ObjC compiler libraries (development)"
libclang_devel_REQUIRES="libllvm-devel"
libclang_devel_OBSOLETES="libclang-devel-static"
libclang_devel_CONTENTS="
  usr/include/clang*/
  usr/lib/cmake/clang/
  usr/lib/libclang*.dll.a
"

# created by patches
DISTCLEANFILES="lib/Driver/ToolChains/Cygwin.*"

# the executables link against both public (exported in DLL) and
# private (only in static libs) LLVM APIs
LDFLAGS+=" -Wl,--allow-multiple-definition"

src_compile() {
    # leave optimization to build system, fails to dlopen with -O2
    CFLAGS=${CFLAGS/-O[0-9]/}
    CXXFLAGS=${CXXFLAGS/-O[0-9]/}

    cd ${B}
    cygcmake \
	-DLLVM_CONFIG=/usr/bin/llvm-config \
	-DBUILD_SHARED_LIBS=ON \
	-DCLANG_ENABLE_ARCMT=ON \
	-DCLANG_ENABLE_STATIC_ANALYZER=ON \
	-DCLANG_INCLUDE_TESTS=OFF \
	-DCLANG_INCLUDE_EXAMPLES=OFF \
	-DCLANG_INCLUDE_DOCS=OFF \
	-DGCC_INSTALL_PREFIX=/usr \
	-DLINK_POLLY_INTO_TOOLS=ON -DWITH_POLLY=ON

    cygninja
}

src_install() {
    local tgt

    cd ${B}
    ninja_install

    dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang++
    dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang++-${PV%%.*}
    rm ${D}/usr/bin/clang-{cl,cpp}
    dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang-cpp

    pushd ${D}/usr/share/clang
    insinto /usr/share/bash-completion/completions
    newins bash-autocomplete.sh clang
    rm -f bash-autocomplete.sh clang-format* clang-rename*
    popd

    python3_optimize /usr/share/scan-{build,view}

}
