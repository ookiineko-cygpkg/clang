CYGCMAKE_GENERATOR="Ninja"
inherit cmake python2 emacs vim

NAME="clang"
VERSION=8.0.1
RELEASE=1
CATEGORY="Devel"
SUMMARY="C/C++ compiler frontend based on LLVM"
DESCRIPTION="Clang is an LLVM native C/C++/ObjC compiler, which aims to deliver
amazingly fast compiles, extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang Static
Analyzer is a tool that automatically finds bugs in your code, and is a great
example of the sort of tool that can be built using the Clang frontend as a
library to parse C/C++ code."
HOMEPAGE="http://clang.llvm.org/"
SRC_URI="https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}/cfe-${VERSION}.src.tar.xz"
SRC_DIR="cfe-${VERSION}.src"
PATCH_URI="
	3.9.1-lib-soversion.patch
	7.0.1-linux-includes.patch
	7.0.1-mingw-sjlj.patch
	7.0.1-mingw-stdcxxlibs.patch
	7.0.1-mingw-sysroot.patch
	7.0.1-cygwin-basic.patch
	7.0.1-cygwin-driver.patch
	5.0.1-newlib-ftm.patch
	7.0.1-objc-seh.patch
	8.0.1-polly-cmake.patch
"

PKG_NAMES="clang clang-analyzer clang-doc
	emacs-clang-format vim-clang-format git-clang-format
	libclang8 libclang-devel
	mingw64-i686-clang mingw64-x86_64-clang"
clang_REQUIRES="binutils compiler-rt cygwin-devel gcc-core gcc-g++ libc++-devel libunwind-devel windows-default-manifest"
clang_CONTENTS="
	--exclude=html
	usr/bin/clang
	usr/bin/clang++
	usr/bin/clang-check.exe
	usr/bin/clang-cpp
	usr/bin/clang-extdef-mapping.exe
	usr/bin/clang-format.exe
	usr/bin/clang-import-test.exe
	usr/bin/clang-offload-bundler.exe
	usr/bin/clang-refactor.exe
	usr/bin/clang-rename.exe
	usr/bin/diagtool.exe
	usr/bin/hmaptool
	usr/bin/c-index-test.exe
	usr/share/bash-completion/completions/clang
	usr/share/doc/clang/
	usr/share/man/man1/clang*
"
clang_analyzer_SUMMARY="C/C++/ObjC code analyzer"
clang_analyzer_REQUIRES="clang"
clang_analyzer_CONTENTS="
	usr/bin/scan-*
	usr/libexec/c*-analyzer
	usr/share/scan-*
	usr/share/man/man1/scan-build.*
"
clang_doc_CATEGORY="Doc"
clang_doc_CONTENTS="usr/share/doc/clang/html/"
emacs_clang_format_CATEGORY="Editors"
emacs_clang_format_SUMMARY="C/C++ code formatting support for Emacs"
emacs_clang_format_REQUIRES="clang"
emacs_clang_format_CONTENTS=${EMACS_SITE#/}
vim_clang_format_CATEGORY="Editors"
vim_clang_format_SUMMARY="C/C++ code formatting support for Vim"
vim_clang_format_REQUIRES="clang"
vim_clang_format_CONTENTS=${VIMFILES#/}
git_clang_format_SUMMARY="C/C++ code formatting support for Git"
git_clang_format_REQUIRES="clang git"
git_clang_format_CONTENTS="usr/bin/git-clang-format"
libclang8_CATEGORY="Libs"
libclang8_SUMMARY="C/C++/ObjC compiler libraries (runtime)"
libclang8_CONTENTS="
	usr/bin/clang-8.exe
	usr/bin/clang++-8
	usr/bin/cygclang*-8.dll
	usr/lib/clang/${VERSION}/
"
libclang_devel_CATEGORY="Libs"
libclang_devel_SUMMARY="C/C++/ObjC compiler libraries (development)"
libclang_devel_REQUIRES="libllvm-devel"
libclang_devel_OBSOLETES="libclang-devel-static"
libclang_devel_CONTENTS="
	usr/include/clang*/
	usr/lib/cmake/clang/
	usr/lib/libclang*.dll.a
"
mingw64_i686_clang_SUMMARY="Clang compiler for Win32 toolchain"
mingw64_i686_clang_REQUIRES="libclang8 mingw64-i686-binutils mingw64-i686-gcc-core mingw64-i686-gcc-g++ mingw64-i686-runtime"
mingw64_i686_clang_CONTENTS="
	usr/bin/i686-w64-mingw32-clang*
	usr/share/man/man1/i686-w64-mingw32-clang*
"
mingw64_x86_64_clang_SUMMARY="Clang compiler for Win64 toolchain"
mingw64_x86_64_clang_REQUIRES="libclang8 mingw64-x86_64-binutils mingw64-x86_64-gcc-core mingw64-x86_64-gcc-g++ mingw64-x86_64-runtime"
mingw64_x86_64_clang_CONTENTS="
	usr/bin/x86_64-w64-mingw32-clang*
	usr/share/man/man1/x86_64-w64-mingw32-clang*
"

# created by patches
DISTCLEANFILES="lib/Driver/ToolChains/Cygwin.*"

# the executables link against both public (exported in DLL) and
# private (only in static libs) LLVM APIs
LDFLAGS+=" -Wl,--allow-multiple-definition"

src_compile() {
	# leave optimization to build system, fails to dlopen with -O2
	CFLAGS=${CFLAGS/-O[0-9]/}
	CXXFLAGS=${CXXFLAGS/-O[0-9]/}

	cd ${B}
	cygcmake \
		-DLLVM_CONFIG=/usr/bin/llvm-config \
		-DBUILD_SHARED_LIBS=ON \
		-DCLANG_ENABLE_ARCMT=ON \
		-DCLANG_ENABLE_STATIC_ANALYZER=ON \
		-DCLANG_INCLUDE_TESTS=ON -DCLANG_BUILD_TESTS=ON \
		-DCLANG_INCLUDE_EXAMPLES=ON -DCLANG_BUILD_EXAMPLES=OFF \
		-DCLANG_INCLUDE_DOCS=ON -DCLANG_BUILD_DOCS=ON \
		-DLLVM_ENABLE_SPHINX:BOOL=ON -DSPHINX_WARNINGS_AS_ERRORS:BOOL=OFF \
		-DLLVM_ENABLE_DOXYGEN:BOOL=OFF \
		-DGCC_INSTALL_PREFIX=/usr \
		-DLINK_POLLY_INTO_TOOLS=ON -DWITH_POLLY=ON

	cygninja
	cygninja docs-clang-html docs-clang-man
}

src_install() {
	local tgt

	cd ${B}
	ninja_install

	dodoc docs/html/
	doman docs/man/clang.1

	dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang++
	dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang++-${VERSION%%.*}
	dosym clang.1 /usr/share/man/man1/clang++.1
	rm ${D}/usr/bin/clang-cl
	dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang-cpp
	dosym clang.1 /usr/share/man/man1/clang-cpp.1

	pushd ${D}/usr/share/clang
	doemacs clang-format.el clang-rename.el
	viminto syntax
	dovim clang-format.py clang-rename.py
	insinto /usr/share/bash-completion/completions
	newins bash-autocomplete.sh clang
	rm -f bash-autocomplete.sh clang-format* clang-rename*
	popd

	python2_optimize /usr/share/scan-{build,view}

	for tgt in i686-w64-mingw32 x86_64-w64-mingw32
	do
		dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/${tgt}-clang-${VERSION%%.*}
		dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/${tgt}-clang
		dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/${tgt}-clang++-${VERSION%%.*}
		dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/${tgt}-clang++
		cp ${D}/usr/share/man/man1/{,${tgt}-}clang.1
		dosym ${tgt}-clang.1 /usr/share/man/man1/${tgt}-clang++.1
	done
}
